version: '3.1'

volumes:
  mysql-data:
  redis-data:
  activemq-data:
  es-data:

services:

  config:
    build: ./config
    ports:
      - 8888:8888

  discovery:
    build: ./discovery
    ports:
      - 8761:8761

  gateway:
    build: ./gateway
    environment:
      CONFIG_SERVER: http://config:8888
      DISCOVERY_SERVER: http://discovery:8761/eureka
    restart: on-failure
    ports:
      - 8080:8080
    depends_on:
      - config
    entrypoint: ["./wait-for-it.sh", "config:8888", "--timeout=20","--strict", "--", "java", "-jar","app.jar" ]


  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
    ports:
      - 3306:3306
    volumes:
      - mysql-data:/var/lib/mysql

  redis:
    image: redis:3.0
    ports:
      - 6379:6379
    volumes:
      - redis-data:/var/lib/redis

  activemq:
    image: rmohr/activemq:5.14.5-alpine
    ports:
      - 8161:8161
      - 61616:61616
    volumes:
      - activemq-data:/var/lib/activemq
    #      - activemq-data:/opt/activemq/conf
    #      - activemq-data:/opt/activemq/data


  auth-service:
    build: ./auth-service
    environment:
      CONFIG_SERVER: http://config:8888
      DISCOVERY_SERVER: http://discovery:8761/eureka
      DATASOURCE_URL: jdbc:mysql://mysql:3306/auth_service?createDatabaseIfNotExist=true&useUnicode=true&serverTimezone=UTC
    restart: on-failure
    depends_on:
      - mysql
      - config
    entrypoint: ["./wait-for-it.sh", "config:8888", "--timeout=60","--strict", "--", "java", "-jar","app.jar" ]

  song-service:
    build: ./song-service
    environment:
      CONFIG_SERVER: http://config:8888
      DISCOVERY_SERVER: http://discovery:8761/eureka
      DATASOURCE_URL: jdbc:mysql://mysql:3306/song_service?createDatabaseIfNotExist=true&useUnicode=true&serverTimezone=UTC
      ACTIVEMQ: tcp://activemq:61616
      AWS_ACCESS_KEY: $AWS_ACCESS_KEY
      AWS_SECRET_KEY: $AWS_SECRET_KEY
    restart: on-failure
    depends_on:
      - mysql
      - redis
      - activemq
      - config
    entrypoint: ["./wait-for-it.sh", "config:8888", "--timeout=20","--strict", "--", "java", "-jar","app.jar" ]

  play-service:
    build: ./play-service
    environment:
      CONFIG_SERVER: http://config:8888
      DISCOVERY_SERVER: http://discovery:8761/eureka
      DATASOURCE_URL: jdbc:mysql://mysql:3306/play_service?createDatabaseIfNotExist=true&useUnicode=true&serverTimezone=UTC
    restart: on-failure
    depends_on:
      - mysql
      - config
    entrypoint: ["./wait-for-it.sh", "config:8888", "--timeout=20","--strict", "--", "java", "-jar","app.jar" ]


  conversion-service:
    build: ./conversion-service
    environment:
      CONFIG_SERVER: http://config:8888
      DISCOVERY_SERVER: http://discovery:8761/eureka
    restart: on-failure
    depends_on:
      - config
    entrypoint: ["./wait-for-it.sh", "config:8888", "--timeout=20","--strict", "--", "java", "-jar","app.jar" ]


#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
#    environment:
#      - cluster.name=docker-cluster
#      - discovery.type=single-node
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    volumes:
#      - es-data:/usr/share/elasticsearch/data
#    ports:
#      - 9200:9200
#
#  kibana:
#    image: docker.elastic.co/kibana/kibana:7.8.0
#    environment:
#      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
#    restart: on-failure
#    ports:
#      - 5601:5601
#    depends_on:
#      - elasticsearch
#
#  search-service:
#    build: ./search-service
#    environment:
#      CONFIG_SERVER: http://config:8888
#      DISCOVERY_SERVER: http://discovery:8761/eureka
#      ELASTICSEARCH: http://elasticsearch:9200
#    restart: on-failure
#    depends_on:
#      - elasticsearch
#      - config
#    entrypoint: ["./wait-for-it.sh", "config:8888", "--timeout=20","--strict", "--", "java", "-jar","app.jar" ]